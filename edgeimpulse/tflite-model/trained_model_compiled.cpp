/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 20.03.2021 13:52:05

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 288;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[11];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[4];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,33 } };
const ALIGN(8) float tensor_data1[20] = { -0.036926385015249252, 0.47638654708862305, 0.052973978221416473, 0.24002346396446228, -0.0012928303331136703, -0.11036073416471481, -0.076577462255954742, -0.10679497569799423, -0.072654880583286285, -0.064921289682388306, 0.044808659702539444, 0.6232917308807373, 0.22947072982788086, 0.30978083610534668, 0.018736083060503006, 0.3503938615322113, 0.037627875804901123, -0.057774953544139862, -0.029966140165925026, 0.11968392133712769, };
const TfArray<1, int> tensor_dimension1 = { 1, { 20 } };
const ALIGN(8) float tensor_data2[10] = { 0.00031389665673486888, -0.041449073702096939, -0.077996954321861267, -0.10486588627099991, 0.032550614327192307, 0.71958047151565552, 0.048282764852046967, -0.1258113831281662, 0.42530706524848938, 0.0038108022417873144, };
const TfArray<1, int> tensor_dimension2 = { 1, { 10 } };
const ALIGN(8) float tensor_data3[3] = { -0.55439519882202148, 0.1539233922958374, 0.41256779432296753, };
const TfArray<1, int> tensor_dimension3 = { 1, { 3 } };
const ALIGN(8) float tensor_data4[20*33] = { 
  0.28324607014656067, -0.24720853567123413, -0.22323249280452728, 0.019396528601646423, -0.075670048594474792, 0.007578839547932148, -0.30243569612503052, -0.24265500903129578, 0.35777664184570312, 0.79336810111999512, -0.097185760736465454, 0.77196681499481201, -0.2262403815984726, 0.29341277480125427, 0.14001032710075378, 0.32539892196655273, 0.28660041093826294, -0.11314899474382401, 0.22656747698783875, -1.8695369958877563, 0.12918676435947418, -1.0668551921844482, 0.70411813259124756, -0.3933320939540863, -0.57646352052688599, -0.33409145474433899, -0.22460030019283295, 0.18698325753211975, -0.27892369031906128, -0.11683471500873566, -0.40808320045471191, -0.28771382570266724, -0.074236750602722168, 
  -1.3804136514663696, -0.041858777403831482, 0.017141887918114662, -0.20550045371055603, 0.048475783318281174, 0.27400222420692444, 0.16081744432449341, 0.27284219861030579, -1.7773067951202393, -1.1900317668914795, -0.92204535007476807, -1.253673791885376, -0.10093744844198227, -0.39710453152656555, -0.18814371526241302, -0.13312488794326782, -0.12397260963916779, -0.27692908048629761, 0.23038122057914734, -0.13882386684417725, -1.1183602809906006, -0.84879803657531738, -1.88205885887146, -0.25346031785011292, 0.10981158167123795, -0.22251351177692413, 0.1048620417714119, 0.11575528979301453, -0.11409061402082443, 0.018285304307937622, -0.71489322185516357, -0.69951248168945312, -0.99098753929138184, 
  0.6654093861579895, -0.22993685305118561, -0.062462154775857925, 0.056531839072704315, 0.36138886213302612, 0.12303335964679718, -0.4755111038684845, -0.07890358567237854, 0.61868679523468018, 0.96698939800262451, 1.5750311613082886, -2.2337338924407959, -0.64813190698623657, -0.6305890679359436, 0.01602667011320591, -0.50067996978759766, -0.25710216164588928, -0.10732045769691467, 0.27623525261878967, -1.6482738256454468, -1.1263222694396973, -1.8016306161880493, -0.5643390417098999, 0.29935550689697266, -0.48350980877876282, 0.30914503335952759, -0.05968330055475235, 0.0036044027656316757, -0.11383172869682312, -0.19977740943431854, -1.2754746675491333, -1.7059921026229858, -1.2166116237640381, 
  0.19776184856891632, -0.095029547810554504, -0.098862335085868835, 0.16818857192993164, 0.84500902891159058, 0.11618368327617645, -0.40462437272071838, 0.051169693470001221, 1.5042837858200073, 0.53643149137496948, 1.7449066638946533, -2.2296962738037109, -0.044718068093061447, -0.06590840220451355, -0.061338357627391815, -0.26000243425369263, -0.12400911003351212, -0.10137607902288437, 0.31376758217811584, 0.29049637913703918, -0.73632323741912842, -0.87635672092437744, 0.40747982263565063, 0.0086725223809480667, 0.035865548998117447, 0.22580128908157349, 0.15254537761211395, -0.11398927122354507, 0.39080068469047546, 0.061264455318450928, 0.45087200403213501, -0.45679882168769836, 0.37893304228782654, 
  -0.024344403296709061, 0.33936640620231628, -0.41339367628097534, 0.19983211159706116, 0.60042834281921387, 0.30929777026176453, -0.39320942759513855, -0.12980036437511444, 0.28726071119308472, -0.41067013144493103, 0.45229300856590271, -0.76658010482788086, -0.073200173676013947, -0.15997546911239624, -0.30182927846908569, -0.033199936151504517, -0.16308616101741791, -0.14713795483112335, 0.075863122940063477, 0.32586550712585449, -0.39634498953819275, -0.95748388767242432, -0.48487094044685364, 0.043043490499258041, -0.31292769312858582, -0.086818218231201172, 0.12724687159061432, 0.10228913277387619, 0.081968888640403748, -0.003009408712387085, -0.66403508186340332, -1.2058675289154053, -0.86222469806671143, 
  -0.008336460217833519, -0.17044010758399963, -0.2985866367816925, 0.10779339075088501, -0.42909717559814453, 0.085095673799514771, 0.24633291363716125, 0.11178964376449585, -0.66850030422210693, -0.48452818393707275, -1.742945671081543, 2.0860648155212402, 0.59288197755813599, 0.40164029598236084, 0.4411776065826416, 0.29938766360282898, -0.075273364782333374, 0.22065994143486023, 0.22444388270378113, 0.74133855104446411, 0.68070638179779053, 0.95776015520095825, 0.65765756368637085, 0.0082053579390048981, 0.46882587671279907, 0.24158640205860138, 0.17187491059303284, -0.13503523170948029, 0.3238217830657959, 0.10951632261276245, 0.94630473852157593, 2.1437056064605713, 0.78713691234588623, 
  1.1315555572509766, 0.33666872978210449, 0.082794852554798126, -0.030289052054286003, -0.65215194225311279, 0.17932724952697754, 0.21787059307098389, -0.07543867826461792, 0.55474084615707397, 1.5751273632049561, 0.50630265474319458, 0.99798488616943359, -0.038385521620512009, 0.21634306013584137, 0.3437153697013855, 0.16081997752189636, -0.036631979048252106, 0.19167375564575195, 0.089851409196853638, 0.22767369449138641, 1.1071491241455078, 0.71154403686523438, 1.3416764736175537, -0.77060812711715698, -0.44232171773910522, -0.19552858173847198, -0.24367405474185944, -0.045017816126346588, 0.26556015014648438, -0.091368108987808228, -0.016691960394382477, -0.19323216378688812, -0.39899271726608276, 
  -0.15909726917743683, 0.38887676596641541, -0.053354557603597641, -0.056164909154176712, -0.56336653232574463, 0.26803362369537354, 0.050494622439146042, -0.30905058979988098, -0.40301111340522766, 0.14386013150215149, -0.16946689784526825, 0.68929463624954224, -0.083305850625038147, 0.23310914635658264, -0.12956510484218597, 0.024246647953987122, -0.0062663257122039795, -0.26253122091293335, 0.019424885511398315, -0.050816338509321213, 0.73524445295333862, 0.67739075422286987, -0.58870488405227661, -0.02199796587228775, -0.26714420318603516, -0.21455605328083038, -0.077895946800708771, 0.1535203605890274, -0.21446280181407928, 0.23151704668998718, -0.55216675996780396, 0.37299880385398865, -0.58786839246749878, 
  0.014188054017722607, 0.19527094066143036, 0.21062973141670227, -0.15234392881393433, -0.16516195237636566, 0.10789990425109863, -0.0041534407064318657, -0.066160380840301514, -0.92076283693313599, 0.14096599817276001, -1.6431359052658081, 2.438518762588501, 0.19053016602993011, 0.18144845962524414, -0.18255893886089325, -0.052204824984073639, 0.11538408696651459, 0.0028725406154990196, 0.23968318104743958, 0.25350764393806458, 0.79170495271682739, 0.97610646486282349, 0.19706498086452484, -0.030594730749726295, 0.132057785987854, 0.35058751702308655, -0.40241864323616028, 0.1327294260263443, 0.21534927189350128, -0.0051628351211547852, -0.15037302672863007, 1.2182992696762085, -0.14742156863212585, 
  1.4376076459884644, 0.25448811054229736, -0.057073391973972321, 0.091626264154911041, 0.021802829578518867, -0.19818565249443054, -0.26123782992362976, -0.12624906003475189, 1.1704021692276001, 0.93514078855514526, 1.3744456768035889, 0.42222696542739868, -0.26674526929855347, -0.32271227240562439, -0.043707225471735001, -0.25645780563354492, 0.11332971602678299, 0.31961879134178162, 0.27086570858955383, 0.48983576893806458, 1.0996963977813721, 0.3802122175693512, 1.0068250894546509, 0.31964346766471863, -0.25702682137489319, -0.37039837241172791, -0.24365988373756409, -0.22830250859260559, 0.15896452963352203, 0.18952301144599915, -0.81984323263168335, -0.58336371183395386, -0.4710407555103302, 
  0.57173776626586914, -0.24524980783462524, -0.94800996780395508, -0.016130328178405762, 0.5883718729019165, -0.23559825122356415, -0.015541643835604191, -0.010768383741378784, -0.51784175634384155, 0.80470168590545654, -0.50626230239868164, 2.7772758007049561, 0.3683851957321167, 0.82458418607711792, 0.13962052762508392, -0.025645062327384949, -0.14024287462234497, 0.27584078907966614, -0.10325177013874054, 0.65732276439666748, 0.99815535545349121, 1.4472057819366455, 0.6724734902381897, -0.1168336421251297, -0.088410735130310059, 0.091217257082462311, -0.30515679717063904, 0.11900170147418976, -0.12719787657260895, -0.27562448382377625, -0.1513967365026474, -0.022682048380374908, -0.73900055885314941, 
  0.8819078803062439, 0.19890788197517395, -0.14042253792285919, 0.10466522723436356, 0.31717994809150696, 0.42683956027030945, 0.12014392018318176, 0.23238977789878845, 0.96749478578567505, 0.32244738936424255, 1.1081748008728027, -0.27283778786659241, 0.17839615046977997, -0.02890985831618309, -0.11160923540592194, 0.25659677386283875, 0.06541549414396286, 0.21253933012485504, 0.25606814026832581, 1.5270307064056396, 0.79155474901199341, 0.32937675714492798, 0.20899759232997894, 0.31845104694366455, 0.54285699129104614, -0.28305628895759583, 0.22963021695613861, 0.23582445085048676, 0.29800575971603394, 0.20253083109855652, -0.070158727467060089, -0.044040914624929428, 0.069491185247898102, 
  1.1987545490264893, 0.17692451179027557, -0.32307922840118408, -0.048140674829483032, 0.81083929538726807, -0.40289166569709778, -0.30449306964874268, -0.14490216970443726, 1.1052358150482178, 0.4418523907661438, 1.7404297590255737, -1.236088752746582, -0.3512231707572937, 0.078725837171077728, 0.20836731791496277, -0.40281504392623901, 0.11678948253393173, -0.06993577629327774, -0.31777080893516541, 1.1735553741455078, -0.0050192708149552345, 0.085448414087295532, 0.79026919603347778, -0.060711942613124847, -0.71721106767654419, 0.065047279000282288, -0.17329919338226318, 0.029405446723103523, 0.35547053813934326, -0.13972514867782593, -0.17109951376914978, -1.2711971998214722, -0.46462127566337585, 
  0.95776826143264771, -0.12347329407930374, -0.38223597407341003, 0.16966104507446289, 0.45040717720985413, -0.049409598112106323, 0.13438466191291809, -0.065433204174041748, 1.1339423656463623, 0.47715717554092407, 1.8671256303787231, -0.90952205657958984, 0.054694931954145432, -0.29741230607032776, -0.068246923387050629, -0.016619153320789337, -0.22289922833442688, -0.20713610947132111, 0.090664267539978027, 1.0898739099502563, -0.28248149156570435, -0.35242676734924316, 0.50554782152175903, -0.1928592324256897, -0.66388416290283203, 0.1746629923582077, 0.24066375195980072, 0.071648366749286652, 0.38017231225967407, -0.14747343957424164, -0.66697710752487183, -0.54427510499954224, -0.18659426271915436, 
  0.16882941126823425, -0.33292898535728455, 0.79351574182510376, -0.0035359496250748634, 0.26030397415161133, -0.35539248585700989, -0.071659207344055176, 0.20572462677955627, 1.2666274309158325, 0.25946274399757385, 1.3288266658782959, -1.6694447994232178, -0.49235737323760986, -0.33100208640098572, 0.032628297805786133, -0.068225108087062836, -0.1800038069486618, -0.15140512585639954, -0.14156842231750488, -1.3747783899307251, -0.74982351064682007, -0.57273626327514648, -0.38370224833488464, 0.14400863647460938, -0.017853330820798874, 0.098246783018112183, 0.028245408087968826, -0.36098158359527588, -0.04849034920334816, 0.020872116088867188, -0.26267799735069275, -1.2625249624252319, 0.089825950562953949, 
  -1.312314510345459, 0.19499111175537109, 0.40031519532203674, -0.040935523808002472, -0.93837791681289673, 0.21659842133522034, -0.21451830863952637, -0.1645902693271637, -0.58178961277008057, -0.078191064298152924, -1.4728378057479858, 0.33407032489776611, 0.10057113319635391, 0.294493168592453, 0.45157819986343384, -0.075154870748519897, 0.017795182764530182, 0.27845439314842224, 0.20569190382957458, -1.470684289932251, -0.78075641393661499, -0.85462981462478638, -0.38708966970443726, -0.3706592321395874, 0.51993781328201294, -0.14065137505531311, 0.91993522644042969, 0.22726808488368988, 0.66985166072845459, 0.030603110790252686, 0.57830041646957397, 0.93271881341934204, 0.6781126856803894, 
  -0.50932186841964722, 0.6063506007194519, 0.42285600304603577, 0.17180748283863068, -0.18165293335914612, 0.047263525426387787, 0.058465547859668732, -0.15881600975990295, -0.76997703313827515, 0.53785687685012817, -0.75274413824081421, 1.0480343103408813, -0.086999423801898956, -0.13793666660785675, -0.12666842341423035, 0.25172969698905945, 0.28237441182136536, 0.21747033298015594, -0.27817505598068237, -0.68398672342300415, -0.29229673743247986, -0.017392555251717567, -0.31366068124771118, 0.39070892333984375, 0.4201565682888031, 0.12718184292316437, -0.25396808981895447, 0.1460326611995697, 0.22321498394012451, 0.3098846971988678, 0.042779102921485901, 0.32241576910018921, -0.028331795707345009, 
  1.0559026002883911, -0.73816686868667603, -1.2173449993133545, -0.20401832461357117, 0.35530978441238403, 0.0080415531992912292, 0.20259948074817657, 0.23674061894416809, 0.047421526163816452, 0.72790676355361938, 0.84950911998748779, 0.82350045442581177, 0.025226525962352753, -0.12424065917730331, -0.079680435359477997, -0.12665040791034698, 0.0060095950029790401, -0.068067833781242371, -0.17544406652450562, 1.733149528503418, 1.0242410898208618, 0.93206155300140381, 0.76991599798202515, -0.4136694073677063, -0.32301434874534607, -0.071504414081573486, -0.54344582557678223, 0.1977565586566925, -0.1308775395154953, 0.17338290810585022, -0.38341343402862549, -0.53168696165084839, -0.53146284818649292, 
  0.33686047792434692, -0.010632054880261421, -0.19337014853954315, 0.46347743272781372, -0.20891636610031128, 0.19276143610477448, 0.25610262155532837, -0.22608831524848938, -1.2544386386871338, 0.75875097513198853, -1.3165459632873535, 2.2907025814056396, 0.56061840057373047, 0.61384344100952148, 0.060555141419172287, 0.48302030563354492, -0.050705555826425552, 0.044329423457384109, -0.27671027183532715, 0.51839184761047363, 1.6277147531509399, 1.0933688879013062, 0.25609156489372253, 0.36547669768333435, -0.073545999825000763, -0.08402598649263382, 0.066085450351238251, -0.11187870800495148, -0.067957140505313873, -0.020534813404083252, -0.17300607264041901, 0.3987710177898407, -0.039563506841659546, 
  0.97220748662948608, 0.1066773384809494, 0.0006299333181232214, 0.2082289457321167, 0.68603342771530151, 0.065273471176624298, 0.010033288039267063, -0.2854498028755188, 1.2114200592041016, 0.90420854091644287, 1.4841549396514893, -0.98496943712234497, -0.18293732404708862, -0.42113044857978821, 0.14358524978160858, -0.042480822652578354, 0.0067647397518157959, -0.38752931356430054, 0.094955027103424072, 0.34731075167655945, -0.41173312067985535, -0.43771186470985413, 0.48630824685096741, -0.28339642286300659, -0.27989864349365234, 0.24478666484355927, -0.163124680519104, 0.42416289448738098, -0.27153533697128296, -0.32846915721893311, -1.2391632795333862, -1.5222514867782593, -0.49672570824623108, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 20,33 } };
const ALIGN(8) float tensor_data5[10*20] = { 
  0.37889388203620911, -0.97032403945922852, 0.55814510583877563, 0.21659374237060547, 0.43579614162445068, -0.76843798160552979, 0.87803769111633301, 0.14735724031925201, -0.32343101501464844, 0.63977575302124023, 0.62132757902145386, -0.080110400915145874, 0.88753229379653931, 0.71111148595809937, 0.09749516099691391, -0.52097803354263306, -0.78244435787200928, 1.0324033498764038, 0.020143650472164154, 0.22726635634899139, 
  -0.28059786558151245, 0.062615931034088135, -0.2165655642747879, 0.14197836816310883, 0.092916376888751984, -0.0045777903869748116, 0.3000338077545166, -0.18902638554573059, -0.18934911489486694, -0.32837957143783569, 0.031690075993537903, -0.37902885675430298, -0.1014312207698822, -0.16600760817527771, -0.33105406165122986, -0.38908883929252625, -0.19309611618518829, 0.25337314605712891, 0.16380448639392853, -0.38586154580116272, 
  -0.33920383453369141, 0.2934531569480896, 0.043561447411775589, -0.1799367219209671, 0.39991605281829834, -0.068748548626899719, 0.11081119626760483, -0.065846651792526245, 0.407703697681427, 0.36087146401405334, -0.20509347319602966, -0.17951521277427673, 0.17273892462253571, -0.45313742756843567, 0.10270104557275772, -0.11538732051849365, -0.025566445663571358, 0.40947344899177551, -0.45173114538192749, -0.049420498311519623, 
  0.065870910882949829, 0.24788692593574524, -0.44056850671768188, -0.50030642747879028, -0.056674361228942871, 0.77845203876495361, 0.44619426131248474, 0.42627361416816711, 0.66718631982803345, -0.39691275358200073, 0.79172098636627197, 0.15531283617019653, -0.37233707308769226, -0.3709489107131958, -0.57108086347579956, 0.68174052238464355, 0.11883372068405151, 0.24463126063346863, 0.52226728200912476, -0.3901323676109314, 
  0.89142674207687378, -0.80066293478012085, -0.68679153919219971, -0.70502263307571411, -0.5455048680305481, 0.97263187170028687, 0.63967913389205933, -0.07547374814748764, 0.25694426894187927, 0.30701819062232971, 0.95147591829299927, -0.28394633531570435, -0.38716742396354675, 0.11062696576118469, -0.82915502786636353, 0.39563590288162231, 0.035018142312765121, 0.18040651082992554, 0.75463348627090454, 0.20695710182189941, 
  -1.1238265037536621, 2.1402192115783691, -0.7623400092124939, 0.28053382039070129, -0.87458497285842896, -0.01903969794511795, -1.9090989828109741, -0.51872044801712036, 0.29185482859611511, -2.2833375930786133, -0.86566346883773804, 0.76200544834136963, -0.069265492260456085, 0.33265155553817749, -0.41131028532981873, 1.3268508911132812, -0.35825735330581665, -0.81572532653808594, -0.8916327953338623, 0.16853827238082886, 
  1.105602502822876, -1.0752668380737305, 0.039229594171047211, 0.21814566850662231, 0.71548795700073242, -0.24609935283660889, 1.179943323135376, 0.42951506376266479, 0.18663483858108521, 0.6728251576423645, 0.13823875784873962, 0.56544941663742065, -0.04881875216960907, 0.1529071182012558, -0.4165852963924408, -0.32237008213996887, 0.14481911063194275, 0.38518595695495605, 0.2492041140794754, -0.051656540483236313, 
  0.67022991180419922, -0.8075028657913208, -0.043838281184434891, -0.51402813196182251, 0.55172663927078247, -0.23092234134674072, 1.2275331020355225, 0.016219303011894226, 0.39265307784080505, 0.82638901472091675, 0.64486688375473022, 0.7594190239906311, 0.21666093170642853, 0.19718316197395325, -0.29776987433433533, -0.62370949983596802, -0.13377323746681213, 0.6529659628868103, 0.037555404007434845, 0.42189210653305054, 
  -0.8750186562538147, 1.3684444427490234, 0.17807319760322571, 0.71273547410964966, 0.29500043392181396, -0.14511324465274811, -0.26081672310829163, -0.52803397178649902, -0.30703762173652649, -0.34092855453491211, -0.21468959748744965, 0.45768165588378906, 0.69824880361557007, 0.54913508892059326, 0.49109703302383423, 0.33405628800392151, -0.3648686408996582, 0.16527505218982697, -0.2152550220489502, 0.015862513333559036, 
  0.26780575513839722, -0.87634265422821045, 0.43399611115455627, 0.42982456088066101, -0.035332992672920227, -0.0015003125881776214, 1.1152687072753906, -0.11926449090242386, 0.25104543566703796, 0.39723309874534607, -0.037880841642618179, 0.53750467300415039, 0.0068566631525754929, 0.09218481183052063, -0.12531895935535431, -0.37227258086204529, 0.61205542087554932, 0.73106759786605835, 0.031038135290145874, 0.64164453744888306, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 10,20 } };
const ALIGN(8) float tensor_data6[3*10] = { 
  0.4058784544467926, -0.56943833827972412, -0.72542744874954224, 1.6078230142593384, 1.5370185375213623, -0.87818849086761475, 0.14437039196491241, 0.26103973388671875, -1.1081993579864502, -0.14637210965156555, 
  1.4627113342285156, -0.091446660459041595, 0.69212418794631958, -1.5480959415435791, -1.1814135313034058, -0.36370018124580383, 0.31774914264678955, 0.42741227149963379, 0.48126032948493958, 0.22449040412902832, 
  -2.7584314346313477, -0.097732037305831909, -0.34556925296783447, 0.28187769651412964, 0.53690963983535767, 1.4511411190032959, -0.6587948203086853, -0.73059558868408203, 0.75172799825668335, -0.53994244337081909, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 3,10 } };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,20 } };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,3 } };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,3 } };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,4,1 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,5,2 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,6,3 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 132, },
  { kTfLiteMmapRo, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 80, },
  { kTfLiteMmapRo, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 40, },
  { kTfLiteMmapRo, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 12, },
  { kTfLiteMmapRo, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 2640, },
  { kTfLiteMmapRo, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 800, },
  { kTfLiteMmapRo, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 120, },
  { kTfLiteArenaRw, tensor_arena + 144, (TfLiteIntArray*)&tensor_dimension7, 80, },
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 40, },
  { kTfLiteArenaRw, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension9, 12, },
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 12, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 11;
  for(size_t i = 0; i < 11; ++i) {
    tflTensors[i].type = kTfLiteFloat32;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization.type = kTfLiteNoQuantization;
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 4; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 4; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 4; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
